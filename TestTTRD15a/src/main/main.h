/*--------------------------------------------------------------------*-

   main.h (Released 2015-02)

  --------------------------------------------------------------------
   
   This is the Project Header file.

   This file needs to be adapted for each project.

-*--------------------------------------------------------------------*/
/*--------------------------------------------------------------------*-

  This code is copyright (c) 2014-2015 SafeTTy Systems Ltd.

  This code forms part of a Time-Triggered Reference Design (TTRD)
  that is documented in the following book: 

  Pont, M.J. (2014) 
  "The Engineering of Reliable Embedded Systems: LPC1769 edition", 
  Published by SafeTTy Systems Ltd. ISBN: 978-0-9930355-0-0.

  Both the TTRDs and the above book ("the ERES book") describe 
  patented* technology and are subject to copyright and other 
  restrictions.

  This code may be used without charge: [i] by universities and 
  colleges in courses for which a degree up to and including MSc 
  level (or equivalent) is awarded; [ii] for non-commercial projects 
  carried out by individuals and hobbyists.

  Where this code has been provided to you as part of a training 
  course delivered by SafeTTy Systems Ltd, you may use it for 
  evaluation purposes for a period of up to 12 months from the 
  end date of this course, subject to the condition that no 
  products (of any kind) based either on this code, or on the 
  patented technology described in the ERES book, are released.

  Any and all other use of this code and / or the patented 
  technology described in the ERES book requires purchase of a 
  ReliabiliTTy Technology Licence:
  http://www.safetty.net/products/reliabilitty

  Please contact SafeTTy Systems Ltd if you require clarification
  of these licensing arrangements:
  http://www.safetty.net/contact

  MoniTTor is a registered trademark of SafeTTy Systems Ltd.
  PredicTTor is a registered trademark of SafeTTy Systems Ltd.
  ReliabiliTTy is a registered trademark of SafeTTy Systems Ltd.
  WarranTTor is a registered trademark of SafeTTy Systems Ltd.

  * Patents applied for.

-*--------------------------------------------------------------------*/

#ifndef _MAIN_H
#define _MAIN_H 1

// Links to target libraries
#include <lpc17xx.h>
#include <cr_section_macros.h>
#include <NXP/crp.h>
#include <lpc17xx_gpio.h>

// Required system operating frequency (in Hz)
// Will be checked in the scheduler initialisation file
#define Required_SystemCoreClock (100000000)

// System header
#include "../system/system_1769_003-0_c15a.h"

// System mode header
#include "../system_mode/system_mode_1769_003-0_c15a.h"

// System state headers
#include "../system_state/system_state_n_1769_003-0_c15a.h"
#include "../system_state/system_state_lh_1769_003-0_c15a.h"

// System (self) test headers
#include "../system_test/system_self_test_bist_1769_003-0_c15a.h"
#include "../system_test/system_self_test_configuration_1769_003-0_c15a.h"
#include "../system_test/system_self_test_mcu_temperature_1769_003-0_c15a.h"
#include "../system_test/system_self_test_post_1769_003-0_c15a.h"

// Scheduler header
#include "../scheduler/ttc_sch_systick_mipi_1769_003-0_c15a.h"

// Port header
#include "../port/port_1769_003-0_c15a.h"

// Heartbeat
#include "../heartbeat/heartbeat_overrun_1769_003-0_c15a.h"

// Resource barriers (lightweight)
#include "../resource_barriers_light/gpio_checks_1769_003-0_c08a.h"

// MoniTTor support
#include "../monittor/monittor_i_t0_1769_003-0_c15a.h"

// PredicTTor support
#include "../predicttor/predicttor_i_1769_003-0_c15a.h"

// Watchdog support
#include "../watchdog/watchdog_1769_003-0_c15a.h"

//------------------------------------------------------------------
// Low-level (generic) fault codes (200+)
//------------------------------------------------------------------

// ***********************************************
// Must manually set MAX and MIN fault-code values
// ===============================================
#define FAULT_CODE_MIN (200)
#define FAULT_CODE_MAX (220)

// No identified fault
// May be generated by unplanned WDT overflow
#define FAULT_UNIDENTIFIED (200)

// WDT not enabled
// See ERES(1769) Chapter 2
#define FAULT_NO_WDT (201)

// Failed configuration check
// See ERES(1769) Chapter 13
#define FAULT_CONFIGURATION (202)

// Fault when attempting to add task to the schedule
// The scheduler is already running
// See ERES(1769) Chapter 8 and Chapter 15
#define FAULT_SCH_RUNNING (203)

// Fault when attempting to add task to the schedule
// No space available in the scheduler array
// See ERES(1769) Chapter 2 and Chapter 15
#define FAULT_SCH_TOO_MANY_TASKS (204)

// Fault when attempting to add task to the schedule
// Attempt to add a "one shot" task to the schedule
// (only periodic tasks are supported)
// See ERES(1769) Chapter 2 and Chapter 15
#define FAULT_SCH_ONE_SHOT_TASK (205)

// Failed POST
// See ERES(1769) Chapter 13 and Chapter 15
#define FAULT_POST (206)

// Failed BIST
// See ERES(1769) Chapter 13 and Chapter 15
#define FAULT_BIST (207)

// MCU temperature is out of range
// See ERES(1769) Chapter 13 and Chapter 15
#define FAULT_MCU_TEMPERATURE (208)

// Resource-related fault
// See ERES(1769) Chapter 8
#define FAULT_RESOURCE (209)

// Timing-related fault (WCET or BCET)
// See ERES(1769) Chapter 9
#define FAULT_TASK_TIMING (210)

// Task-sequence fault
// See ERES(1769) Chapter 10
#define FAULT_TASK_SEQUENCE (211)

//------------------------------------------------------------------
// Specific system (washer) fault codes
// See ERES(1769) Chapter 15
//------------------------------------------------------------------

// Water found in drum in initial state (Normal mode)
// Power turned off / power cut in middle of wash?
// => Drain drum (in Limp Home mode) and start again ...
#define FAULT_WATER_IN_DRUM (212)

// Drum found to be rotating in initial state (Normal mode)
// Brief power glitch in middle of wash?
// Serious problem with motor interface?
// => Wait (in Limp Home mode)
#define FAULT_DRUM_TURNING (213)

// Drum is rotating (LH mode)
// Waiting for it to stop
// Door appears to be open (dangerous combination)
#define FAULT_DRUM_STOP_OPEN_DOOR_LH (214)

// Drum is rotating (LH mode)
// Timeout while waiting for it to stop
#define FAULT_DRUM_STOP_TIMEOUT_LH (215)

// A fault with the door lock or door sensor?
#define FAULT_DOOR (216)

// A fault with the water supply or water valve?
#define FAULT_FILL_DRUM (217)

// A fault with the water heater?
#define FAULT_HEAT_WATER (218)

// A fault with the pump?
#define FAULT_DRAIN_DRUM (219)

// Timeout while trying to drain drum in LH mode
#define FAULT_DRAIN_DRUM_TIMEOUT_LH (220)

//------------------------------------------------------------------
// Project constants
//------------------------------------------------------------------

#define RETURN_NORMAL (0)
#define RETURN_FAULT (1)

#define OFF (0)
#define ON (1)

#define UNLOCKED (1)
#define LOCKED (0)

#define OPEN (0)
#define CLOSED (1)

#define RUNNING (1)
#define STOPPED (0)

#endif

/*--------------------------------------------------------------------*-
  ------ END OF FILE -------------------------------------------------
-*--------------------------------------------------------------------*/

