/*
 * weather_station.c
 *
 *  Created on: 18 de dic. de 2019
 *      Author: Santiago
 */

#include "weather_station.h"
#include "lpc17xx_uart.h"

static uint16_t weather_data[WEATHER_DATA][WEATHER_PARAMETERS];
static uint32_t samples;



/**
 * @brief   Current Inside Temperature Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentInsideTemperature(int16_t *data){
	*data=(int16_t)weather_data[INSIDE_TEMPERATURE][CURRENT_DATA];
}

/**
 * @brief   Average Inside Temperature Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
void getAverageInsideTemperature(int16_t *avg){
	/* To avoid division by 0 */
	if(samples)
		*avg=(int16_t)(((weather_data[INSIDE_TEMPERATURE][AVG_DATA]<<16) + weather_data[INSIDE_TEMPERATURE][AVG_DATA+1])/samples);
	else
		*avg=0;
}

/**
 * @brief   Max Inside Temperature Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
void getMaxInsideTemperature(int16_t *max){
	*max=(int16_t)weather_data[INSIDE_TEMPERATURE][MAX_DATA];
}

/**
 * @brief   Min Inside Temperature Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
void getMinInsideTemperature(int16_t *min){
	*min=(int16_t)weather_data[INSIDE_TEMPERATURE][MIN_DATA];
}

/**
 * @brief   Current Outside Temperature Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentOutsideTemperature(int16_t *data){
	*data=(int16_t)weather_data[OUTSIDE_TEMPERATURE][CURRENT_DATA];
}

/**
 * @brief   Average Outside Temperature Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
void getAverageOutsideTemperature(int16_t *avg){
	/* To avoid division by 0 */
	if(samples)
		*avg=(int16_t)(((weather_data[OUTSIDE_TEMPERATURE][AVG_DATA]<<16) + weather_data[OUTSIDE_TEMPERATURE][AVG_DATA+1])/samples);
	else
		*avg=0;
}

/**
 * @brief   Max Outside Temperature Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
void getMaxOutsideTemperature(int16_t *max){
	*max=(int16_t)weather_data[OUTSIDE_TEMPERATURE][MAX_DATA];
}

/**
 * @brief   Min Outside Temperature Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
void getMinOutsideTemperature(int16_t *min){
	*min=(int16_t)weather_data[OUTSIDE_TEMPERATURE][MIN_DATA];
}

/**
 * @brief   Current Dew Point Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentDewPoint(uint16_t *data){
	*data=weather_data[DEW_POINT][CURRENT_DATA];
}

/**
 * @brief   Average Dew Point Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
void getAverageDewPoint(uint16_t *avg){
	/* To avoid division by 0 */
	if(samples)
		*avg=(uint16_t)(((weather_data[DEW_POINT][AVG_DATA]<<16) + weather_data[DEW_POINT][AVG_DATA+1])/samples);
	else
		*avg=0;
}

/**
 * @brief   Max Dew Point Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
void getMaxDewPoint(uint16_t *max){
	*max=weather_data[DEW_POINT][MAX_DATA];
}

/**
 * @brief   Min Dew Point Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
void getMinDewPoint(uint16_t *min){
	*min=weather_data[DEW_POINT][MIN_DATA];
}

/**
 * @brief   Current Inside Humidity Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentInsideHumidity(uint16_t *data){
	*data=weather_data[INSIDE_HUMIDITY][CURRENT_DATA];
}

/**
 * @brief   Average Inside Humidity Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
void getAverageInsideHumidity(uint16_t *avg){
	/* To avoid division by 0 */
	if(samples)
		*avg=(uint16_t)(((weather_data[INSIDE_HUMIDITY][AVG_DATA]<<16) + weather_data[INSIDE_HUMIDITY][AVG_DATA+1])/samples);
	else
		*avg=0;
}

/**
 * @brief   Max Inside Humidity Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
void getMaxInsideHumidity(uint16_t *max){
	*max=weather_data[INSIDE_HUMIDITY][MAX_DATA];
}

/**
 * @brief   Min Inside Humidity Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
void getMinInsideHumidity(uint16_t *min){
	*min=weather_data[INSIDE_HUMIDITY][MIN_DATA];
}

/**
 * @brief   Current Outside Humidity Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentOutsideHumidity(uint16_t *data){
	*data=weather_data[OUTSIDE_HUMIDITY][CURRENT_DATA];
}

/**
 * @brief   Average Outside Humidity Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
void getAverageOutsideHumidity(uint16_t *avg){
	/* To avoid division by 0 */
	if(samples)
		*avg=(uint16_t)(((weather_data[OUTSIDE_HUMIDITY][AVG_DATA]<<16) + weather_data[OUTSIDE_HUMIDITY][AVG_DATA+1])/samples);
	else
		*avg=0;
}

/**
 * @brief   Max Outside Humidity Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
void getMaxOutsideHumidity(uint16_t *max){
	*max=weather_data[OUTSIDE_HUMIDITY][MAX_DATA];
}

/**
 * @brief   Min Outside Humidity Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
void getMinOutsideHumidity(uint16_t *min){
	*min=weather_data[OUTSIDE_HUMIDITY][MIN_DATA];
}

/**
 * @brief   Current Wind Speed Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentWindSpeed(uint16_t *data){
	*data=weather_data[WIND_SPEED][CURRENT_DATA];
}

/**
 * @brief   Average Wind Speed Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
void getAverageWindSpeed(uint16_t *avg){
	/* To avoid division by 0 */
	if(samples)
		*avg=(uint16_t)(((weather_data[WIND_SPEED][AVG_DATA]<<16) + weather_data[WIND_SPEED][AVG_DATA+1])/samples);
	else
		*avg=0;
}

/**
 * @brief   Max Wind Speed Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
void getMaxWindSpeed(uint16_t *max){
	*max=weather_data[WIND_SPEED][MAX_DATA];
}

/**
 * @brief   Min Wind Speed Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
void getMinWindSpeed(uint16_t *min){
	*min=weather_data[WIND_SPEED][MIN_DATA];
}

/**
 * @brief   Current Wind Chill Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentWindChill(uint16_t *data){
	*data=weather_data[WIND_CHILL][CURRENT_DATA];
}

/**
 * @brief   Average Wind Chill Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
void getAverageWindChill(uint16_t *avg){
	/* To avoid division by 0 */
	if(samples)
		*avg=(uint16_t)(((weather_data[WIND_CHILL][AVG_DATA]<<16) + weather_data[WIND_CHILL][AVG_DATA+1])/samples);
	else
		*avg=0;
}

/**
 * @brief   Max Wind Chill Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
void getMaxWindChill(uint16_t *max){
	*max=weather_data[WIND_CHILL][MAX_DATA];
}

/**
 * @brief   Min Wind Chill Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
void getMinWindChill(uint16_t *min){
	*min=weather_data[WIND_CHILL][MIN_DATA];
}

/**
 * @brief   Current Wind Direction Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentWindDirection(uint16_t *data){
	*data=weather_data[WIND_DIRECTION][CURRENT_DATA];
}

/**
 * @brief   Current Barometric Pressure Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
void getCurrentBarometricPressure(uint16_t *data){
	*data=weather_data[BAROMETRIC_PRESSURE][CURRENT_DATA];
}

/**
 * @brief   Average Barometric Pressure Getter
 * @param   avg : Pointer to where to store data
 * @return  Nothing
 */
uint16_t getAverageBarometricPressure(){
	/* To avoid division by 0 */
	if(samples)
		return (uint16_t)(((weather_data[BAROMETRIC_PRESSURE][AVG_DATA_HIGH]<<16) + weather_data[BAROMETRIC_PRESSURE][AVG_DATA_LOW])/samples);
	else
		return 0;
}

/**
 * @brief   Max Barometric Pressure Getter
 * @param   max : Pointer to where to store data
 * @return  Nothing
 */
uint16_t getMaxBarometricPressure(){
	return weather_data[BAROMETRIC_PRESSURE][MAX_DATA];
}

/**
 * @brief   Min Barometric Pressure Getter
 * @param   min : Pointer to where to store data
 * @return  Nothing
 */
uint16_t getMinBarometricPressure(){
	return weather_data[BAROMETRIC_PRESSURE][MIN_DATA];
}

/**
 * @brief   Current Daily Rain Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
uint16_t getCurrentDailyRain(){
	return weather_data[DAILY_RAIN][CURRENT_DATA];
}

/**
 * @brief   Current Yearly Rain Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
uint16_t getCurrentYearlyRain(){
	return weather_data[YEARLY_RAIN][CURRENT_DATA];
}

/**
 * @brief   Current Battery Voltage Getter
 * @param   data : Pointer to where to store data
 * @return  Nothing
 */
uint16_t getCurrentBatteryVoltage(){
	return weather_data[BATTERY_VOLTAGE][CURRENT_DATA];
}
